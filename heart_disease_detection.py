# -*- coding: utf-8 -*-
"""Heart Disease prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kNCZgcl5kJue9Xs_P0QF0xMqcn8NVFJy

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

#loading csv data to pandas data frame
heart_data = pd.read_csv('/content/heart_disease_data.csv')

#print first 5 rows of dataset
heart_data.head()

#print last 5 rows of dataset
heart_data.tail()

#number of rows and columns in dataset 
heart_data.shape

#getting some info about data
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

#statistical measures of data
heart_data.describe()

#checking the distribution of target variables
heart_data['target'].value_counts()

"""1 --> Defective heart
0 --> Healthy heart
"""

#splitting the features and target
X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print (X)

print (Y)

"""Train and test split"""

#splitting the data into train and test data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape , X_train.shape, X_test.shape)

"""Model training - Logistic regression model"""

model=LogisticRegression()

#training logistic regression model with training data
model.fit(X_train,Y_train)

"""Model evaluation -Accuracy score"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data: ',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data: ',test_data_accuracy)

"""Buildling a Predictive system"""

input_data=(62,0,0,140,268,0,0,160,0,3.6,0,2,2)
#change input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshape)
print(prediction)

if(prediction[0]==0):
  print('person does not have a heart disease')
else:
  print('person has heart disease')